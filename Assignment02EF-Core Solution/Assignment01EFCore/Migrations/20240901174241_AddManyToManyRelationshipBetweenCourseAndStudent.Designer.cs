// <auto-generated />
using System;
using Assignment01EFCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment01EFCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240901174241_AddManyToManyRelationshipBetweenCourseAndStudent")]
    partial class AddManyToManyRelationshipBetweenCourseAndStudent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment01EFCore.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("TopicId")
                        .IsUnique()
                        .HasFilter("[TopicId] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("InsId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bonus")
                        .HasColumnType("float");

                    b.Property<int>("DeptId")
                        .HasColumnType("int");

                    b.Property<int>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("InstructorId");

                    b.HasIndex("DeptId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("DeptId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Stud_Course");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Course", b =>
                {
                    b.HasOne("Assignment01EFCore.Entities.Topic", "CourseTopic")
                        .WithOne("CourseHasTopic")
                        .HasForeignKey("Assignment01EFCore.Entities.Course", "TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CourseTopic");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Department", b =>
                {
                    b.HasOne("Assignment01EFCore.Entities.Instructor", "Manager")
                        .WithOne("DeptManage")
                        .HasForeignKey("Assignment01EFCore.Entities.Department", "InsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Instructor", b =>
                {
                    b.HasOne("Assignment01EFCore.Entities.Department", "DeptWork")
                        .WithMany("InstructorsWork")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeptWork");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Student", b =>
                {
                    b.HasOne("Assignment01EFCore.Entities.Department", "Dpartment")
                        .WithMany("Students")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dpartment");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.StudentCourse", b =>
                {
                    b.HasOne("Assignment01EFCore.Entities.Course", "Course")
                        .WithMany("StudentCourse")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment01EFCore.Entities.Student", "Student")
                        .WithMany("StudentCourse")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Course", b =>
                {
                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Department", b =>
                {
                    b.Navigation("InstructorsWork");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Instructor", b =>
                {
                    b.Navigation("DeptManage")
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Student", b =>
                {
                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("Assignment01EFCore.Entities.Topic", b =>
                {
                    b.Navigation("CourseHasTopic")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
